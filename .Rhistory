library(tvR)
library(tvR)
devtools::document()
library(tvR)
library(tvR)
devtools::document()
check_niter <- function(niter){
if (length(niter)==1){
if (niter > 1){
if ((!is.na(niter))&&(!is.infinite(niter))){
if (abs(niter-round(niter))<sqrt(.Machine$double.eps)){
return(TRUE)
}
}
}
}
return(FALSE)
}
check_niter(1)
check_niter(2)
check_niter(3)
check_niter(3.1)
check_niter(c(1,2))
rm(list=ls())
library(tvR)
x = sin(seq(from=0,to=5,length.out=100))
x = x + 0.1*matrix(rnorm(length(x)),dim(x))
x = x + 0.1*matrix(rnorm(length(x)),nrow=1)
x = sin(seq(from=0,to=5,length.out=100))
xnoised = x + 0.1*matrix(rnorm(length(x)),nrow=1)
xproc   = tvRsignal(xnoised)
class(xnoised)
length(xnoised)
dim(xnoised)
library(tvR)
x = sin(seq(from=0,to=5,length.out=100))
xnoised = x + 0.1*matrix(rnorm(length(x)),nrow=1)
xproc   = tvRsignal(xnoised)
xproc   = tvRsignal(xnoised,lambda=1.0)
dim(1.0)
length(1.0)
library(tvR)
xproc   = tvRsignal(xnoised)
library(tvR)
xproc   = tvRsignal(xnoised)
plot(xproc)
xproc
xproc
library(tvR)
xproc   = tvRsignal(xnoised)
library(tvR)
xproc   = tvRsignal(xnoised)
plot(xproc)
xproc
plot(1:100,xproc)
library(tvR)
library(tvR)
?tvRsignal
library(tvR)
x = sin(seq(from=0,to=5,length.out=100))
xnoised = x + 0.1*matrix(rnorm(length(x)),nrow=1)
xproc1   = tvRsignal(xnoised,method="TVL1.IC")
xproc1   = tvRsignal(xnoised,method="TVL2.IC")
xproc2   = tvRsignal(xnoised,method="TVL2.MM")
par(mfrow=c(1,2))
plot(1:100,xproc1)
plot(1:100,xproc2)
plot(1:100,xnoised)
?tvRsignal
library(tvR)
?tvRsignal
library(tvR)
?tvRsignal
library(tvR)
library(tvR)
library(tvR)
?tvRsignal
library(tvR)
?tvRsignal
x = sin(seq(from=0,to=5,length.out=100))
xnoised = x + 0.1*matrix(rnorm(length(x)),nrow=1)
xproc1   = tvRsignal(xnoised,method="TVL2.IC")
xproc2   = tvRsignal(xnoised,method="TVL2.MM")
x = sin(seq(from=0,to=20,length.out=100))
xnoised = x + 0.1*matrix(rnorm(length(x)),nrow=1)
xproc1   = tvRsignal(xnoised,method="TVL2.IC")
xproc2   = tvRsignal(xnoised,method="TVL2.MM")
xproc1
plot(1:100,xproc1)
library(tvR)
library(tvR)
library(tvR)
x = sin(seq(from=0,to=20,length.out=100))
xnoised = x + 0.1*matrix(rnorm(length(x)),nrow=1)
xproc1   = denoise1(xnoised,method="TVL2.IC")
xproc2   = denoise1(xnoised,method="TVL2.MM")
plot(1:100, xproc1)
graphics.off()
install.packages("rstiefel")
install.packages("ManifoldOptim")
library(ManifoldOptim)
?manifold.optim
library(tvR)
library(tvR)
?cmdscale
library(tvR)
library(tvR)
library(tvR)
?denoise1
?denoise2
library(tvR)
?denoise2
library(imager)
x = imager::boats
?resize
?imresize
xred = imresize(im, scale=0.5)
xred = imresize(x, scale=0.5)
dim(xred)
dim(x)
x = imager::imresize(imager::boats, scale=0.5)
x
plot(x)
xnoised = x + imager::imnoise(dim=dim(x), sd=0.5)
plot(xnoised)
?plot
xnoised = x + imager::imnoise(dim=dim(x), sd=0.3); plot(xnoised)
xnoised = x + imager::imnoise(dim=dim(x), sd=0.2); plot(xnoised)
xnoised = x + imager::imnoise(dim=dim(x), sd=0.1); plot(xnoised)
xnoised = x + imager::imnoise(dim=dim(x), sd=0.01); plot(xnoised)
xnoised = x + imager::imnoise(dim=dim(x), sd=0.2); plot(xnoised)
?imnoise
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual")
library(tvR)
?denoise2
x = imager::imresize(imager::boats, scale=0.5)
## Add white noise
xnoised = x + imager::imnoise(dim=dim(x), sd=0.2); plot(xnoised)
## apply denoising models
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual")
xproc2 = deonise2(xnoised, method="TVL1.PrimalDual")
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual")
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
library(tvR)
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual")
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
plot(x, main="original")
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.PrimalDual")
plot(xproc2, main="TVL1.PrimalDual")
?sample
x = rep(sample(1:5,10,replace=TRUE), each=50)
x
source('~/Desktop/tvR/R/denoise2.R', echo=TRUE)
## Load data from 'imager' library and rescale it
library(imager)
x = imager::imresize(imager::boats, scale=0.5)
## Add white noise
xnoised = x + imager::imnoise(dim=dim(x), sd=0.1); plot(xnoised)
## apply denoising models
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual")
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.PrimalDual")
plot(xproc2, main="TVL1.PrimalDual")
library(tvR)
rm(list=ls())
library(tvR)
## Load data from 'imager' library and rescale it
library(imager)
x = imager::imresize(imager::boats, scale=0.5)
## Add white noise
xnoised = x + imager::imnoise(dim=dim(x), sd=0.1); plot(xnoised)
## apply denoising models
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual")
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.PrimalDual")
plot(xproc2, main="TVL1.PrimalDual")
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual", lambda=10)
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.PrimalDual")
plot(xproc2, main="TVL1.PrimalDual")
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual", lambda=0.01)
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.PrimalDual")
plot(xproc2, main="TVL1.PrimalDual")
xproc1 = denoise2(xnoised, method="TVL2.PrimalDual", lambda=0.1)
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual", lambda=0.1)
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.PrimalDual")
plot(xproc2, main="TVL1.PrimalDual")
xproc1 = denoise2(xnoised, method="TVL2.FiniteDifference")
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.PrimalDual")
plot(xproc2, main="TVL1.PrimalDual")
xnoised
xnew = array(0,c(128,192,3))
xnew[,,1] = xnoised[,,1,1]
xnew[,,2] = xnoised[,,1,2]
xnew[,,3] = xnoised[,,1,3]
xnoised = xnew
## apply denoising models
xproc1 = denoise2(xnoised, method="TVL2.FiniteDifference")
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.FiniteDifference")
plot(xproc2, main="TVL1.PrimalDual")
library(imager)
x = imager::imresize(imager::boats, scale=0.5)
## Add white noise
xnoised = x + imager::imnoise(dim=dim(x), sd=0.1); plot(xnoised)
## apply denoising models
xproc1 = denoise2(xnoised, method="TVL2.FiniteDifference")
xproc2 = denoise2(xnoised, method="TVL1.PrimalDual")
## compare
par(mfrow=c(2,2))
plot(x, main="original")
plot(xnoised, main="noised")
plot(xproc1, main="TVL2.FiniteDifference")
plot(xproc2, main="TVL1.PrimalDual")
plot(xnoised)
x = rep(sample(1:5,10,replace=TRUE), each=50)
## add some additive white noise
xnoised = x + rnorm(length(x), sd=0.25)
## apply denoising process
xproc1 = denoise1(xnoised, method = "TVL2.IC")
xproc2 = denoise1(xnoised, method = "TVL2.MM")
plot(xnoised)
plot(xnoised, pch=19, cex=0.3)
lines(xproc1, col="blue", lwd=3)
graphics.off()
plot(xnoised, pch=19, cex=0.3)
lines(xproc1, col="blue", lwd=3)
xproc1
lines(xproc2, col="red", lwd=3)
lines(xproc1, col="blue", lwd=3)
lines(xproc2, col="red", lwd=3)
plot(xnoised, pch=19, cex=0.1)
lines(xproc1, col="blue", lwd=3)
lines(xproc2, col="red", lwd=3)
xproc1 = denoise1(xnoised, method = "TVL2.IC")
xproc2 = denoise1(xnoised, method = "TVL2.MM")
xproc1
xproc2
library(tvR)
x = rep(sample(1:5,10,replace=TRUE), each=50)
## add some additive white noise
xnoised = x + rnorm(length(x), sd=0.25)
## apply denoising process
xproc1 = denoise1(xnoised, method = "TVL2.IC")
xproc2 = denoise1(xnoised, method = "TVL2.MM")
graphics.off()
plot(xnoised, pch=19, cex=0.1)
lines(xproc1, col="blue", lwd=3)
lines(xproc2, col="red", lwd=3)
plot(xnoised, pch=19, cex=0.1, main="Noisy signal")
lines(xproc1, col="blue", lwd=1)
lines(xproc2, col="red", lwd=1)
?legend
graphics.off()
plot(xnoised, pch=19, cex=0.1, main="Noisy signal")
lines(xproc1, col="blue", lwd=2)
lines(xproc2, col="red", lwd=2)
legend(legend=c("Noisy","TVL2.IC","TVL2.MM"), col=c("black","blue","red"))
legend("topleft",legend=c("Noisy","TVL2.IC","TVL2.MM"), col=c("black","blue","red"))
legend("topleft",legend=c("Noisy","TVL2.IC","TVL2.MM"), col=c("black","blue","red"), lty = c("solid", "solid", "solid"), lwd = c(2, 0, 1), pch = c(NA, 19, NA), pt.cex = c(NA, 0.3, NA), inset = 0.05))
legend("topleft",legend=c("Noisy","TVL2.IC","TVL2.MM"), col=c("black","blue","red"), lty = c("solid", "solid", "solid"), lwd = c(2, 0, 1), pch = c(NA, 19, NA), pt.cex = c(NA, 0.3, NA), inset = 0.05)
graphics.off()
plot(xnoised, pch=19, cex=0.1, main="Noisy signal")
lines(xproc1, col="blue", lwd=2)
lines(xproc2, col="red", lwd=2)
legend("topleft",legend=c("Noisy","TVL2.IC","TVL2.MM"), col=c("black","blue","red"),
lty = c("solid", "solid", "solid"), lwd = c(0, 2, 2), pch = c(19, NA, NA), pt.cex = c(0.1, NA, NA), inset = 0.05)
library(tvR)
library(tvR)
graphics.off()
plot(xnoised, pch=19, cex=0.1, main="Noisy signal")
lines(xproc1, col="blue", lwd=2)
lines(xproc2, col="red", lwd=2)
legend("topleft",legend=c("Noisy","TVL2.IC","TVL2.MM"), col=c("black","blue","red"),
lty = c("solid", "solid", "solid"), lwd = c(0, 2, 2), pch = c(19, NA, NA), pt.cex = c(1, NA, NA), inset = 0.05)
library(tvR)
?tvR
?`tvR-package`
library(tvR)
library(tvR)
library(tvR)
?`tvR-package`
?denoise1
library(tvR)
library(tvR)
library(tvR)
library(tvR)
library(tvR)
library(tvR)
install.packages("imager")
install.packages("Cairo")
library(tvR)
library(tvR)
library(tvR)
library(tvR)
?denoise1
library(tvR)
?denoise2
library(tvR)
library(tvR)
install.packages(c("DBI", "RcppGSL", "data.table", "gss", "httpuv", "pbdZMQ", "polyclip", "processx", "psych", "rgenoud", "stringi", "stringr"))
install.packages("imager")
library(tvR)
library(tvR)
install.packages("magick")
library(magick)
library(magick)
frink <- image_read("https://jeroen.github.io/images/frink.png")
frint
frink
plot(frint)
plot(frink)
plot(as.raster(frink))
