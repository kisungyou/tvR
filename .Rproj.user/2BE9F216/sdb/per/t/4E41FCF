{
    "collab_server" : "",
    "contents" : "#' Total Variation Denoising for Image\n#'\n#' Given an image \\code{f}, it solves an optimization of the form,\n#' \\deqn{u^* = argmin_u E(u,f)+\\lambda V(u)}\n#' where \\eqn{E(u,f)} is fidelity term and \\eqn{V(u)} is total variation regularization term.\n#' The naming convention of a parameter \\code{method} is \\code{<problem type>} + \\code{<name of algorithm>}.\n#' For more details, see the section below.\n#'\n#' @section Data format:\n#' An input \\code{image} can have one of three following types: 2-dimensional matrix representaing \\emph{grayscale} image, 3-dimensional array\n#' for \\emph{color} image whose 3rd dimension has size of 3, or \\pkg{cimg} object represented as 4-d array.\n#'\n#' @section Algorithms for TV-L1 problem:\n#' The cost function for TV-L2 problem is\n#' \\deqn{min_u |u-f|_1 + \\lambda |\\nabla u|}\n#' where for a given 2-dimensional array, \\eqn{|\\nabla u| = \\sum sqrt(u_x^2 + u_y^2)}\n#' Algorithms (in conjunction with model type) for this problems are \\describe{\n#'   \\item{\\code{\"TVL1.PrimalDual\"}}{Primal-Dual algorithm.}\n#' }\n#' @section Algorithms for TV-L2 problem:\n#' The cost function for TV-L2 problem is\n#' \\deqn{min_u |u-f|_2^2 + \\lambda |\\nabla u|}\n#' and algorithms (in conjunction with model type) for this problems are \\describe{\n#'   \\item{\\code{\"TVL2.PrimalDual\"}}{Primal-Dual algorithm.}\n#'   \\item{\\code{\"TVL2.FiniteDifference\"}}{Finite Difference scheme with fixed point iteration.}\n#' }\n#'\n#'\n#' @param image standard 2d or 3d array, or \\code{cimg} object.\n#' @param lambda regularization parameter (positive real number).\n#' @param niter  total number of iterations.\n#' @param method indicating problem and algorithm combination.\n#'\n#' @return denoised image of same data type as input \\code{image}.\n#'\n#' @examples\n#' ## Load data from 'imager' library and rescale it\n#' library(imager)\n#' x <- imager::imresize(imager::boats, scale=0.5)\n#'\n#' ## Add white noise\n#' xnoised <- x + imager::imnoise(dim=dim(x), sd=0.1); plot(xnoised)\n#'\n#' ## apply denoising models\n#' xproc1 <- denoise2(xnoised, method=\"TVL2.FiniteDifference\")\n#' xproc2 <- denoise2(xnoised, method=\"TVL1.PrimalDual\")\n#'\n#' ## compare\n#' par(mfrow=c(2,2))\n#' plot(x, main=\"original\")\n#' plot(xnoised, main=\"noised\")\n#' plot(xproc1, main=\"TVL2.FiniteDifference\")\n#' plot(xproc2, main=\"TVL1.PrimalDual\")\n#'\n#' @references\n#' \\insertRef{rudin_nonlinear_1992}{tvR}\n#'\n#' \\insertRef{chambolle_first-order_2011}{tvR}\n#'\n#' @export\ndenoise2 <- function(image, lambda=1.0, niter=100, method=c(\"TVL1.PrimalDual\",\"TVL2.PrimalDual\",\"TVL2.FiniteDifference\")){\n  ## Check Data, Lambda, niter\n  ##    For image data as cimg, it's fine.\n  if (!check_lambda(lambda)){\n    stop(\"* denoise2 : 'lambda' should be a positive real number.\")\n  }\n  if (!check_niter(niter)){\n    stop(\"* denoise2 : 'niter' should be a positive integer larger than 1.\")\n  }\n  checkcimg = is.cimg(image)\n  if (!checkcimg){\n    if (!check_data_image(image)){\n      stop(\"* denoise2 : an 'image' array should be 2d or 3d with 3rd dimension having size of 3.\")\n    }\n    oldw  = getOption(\"warn\")\n    options(warn = -1)\n    image = as.cimg(image)\n    options(warn=oldw)\n  }\n\n  ## Method Argument\n  if (missing(method)){\n    method = \"TVL2.PrimalDual\"\n  } else {\n    method = match.arg(method)\n  }\n\n  ## Main Computation Part\n  output = switch(method,\n                  TVL2.PrimalDual       = denoise2.TVL2.PrimalDual(image, 1.0/lambda, niter, checkcimg),\n                  TVL2.FiniteDifference = denoise2.TVL2.FiniteDifference(image, 1.0/lambda, niter, checkcimg),\n                  TVL1.PrimalDual       = denoise2.TVL1.PrimalDual(image, 1.0/lambda, niter, checkcimg)\n                  )\n\n  ## return output\n  return(output)\n}\n\n## NOTE that for TVL1 and TVL2, sum(sqrt(Ix^2 + Iy^2)) + lambda*||I - g||_2^2 is default used.\n#' ROF : fixed point iteration (http://www.math.ucla.edu/~lvese/285j.1.05s/ROFScheme.pdf)\n",
    "created" : 1512758977749.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2344428019",
    "id" : "4E41FCF",
    "lastKnownWriteTime" : 1512759589,
    "last_content_update" : 1512759589094,
    "path" : "~/Desktop/tvR/R/denoise2.R",
    "project_path" : "R/denoise2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}